 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int       @default(2)
  ipAddress     String?
  lastLogin     DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Video {
  id       Int     @id @default(autoincrement())
  title    String
  url      String  @unique
  note     String?
  isActive Boolean @default(false)
  createdAt DateTime?
  updatedAt DateTime?
}

model Exercise {
  id          Int     @id @default(autoincrement())
  title       String
  duration    String
  description String? @db.Text
  videoUrl    String?
}

// Updated models for sites, categories, and languages

model SiteCategories {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  sites SiteCategory[]
}

model SiteLanguages {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  sites SiteLanguage[]
}

model Site {
  id           Int            @id @default(autoincrement())
  domainName   String         @unique
  monthly      Int
  categories   SiteCategory[]
  languages    SiteLanguage[]
  urls         URL[]
}

model SiteCategory {
  site       Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId     Int
  category   SiteCategories @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([siteId, categoryId])
}

model SiteLanguage {
  site       Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId     Int
  language   SiteLanguages  @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([siteId, languageId])
}

model URL {
  id        Int     @id @default(autoincrement())
  url       String
  siteId    Int
  reviewed  Boolean @default(false)
  site      Site    @relation(fields: [siteId], references: [id])

  @@unique([url, siteId])
}

model Todo {
  id    Int         @id @default(autoincrement())
  title String
  date  DateTime
  note  String?
  links TodoLink[]
}

model TodoLink {
  id     Int    @id @default(autoincrement())
  todoId Int
  url    String
  icon   String @db.Text
  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
}
